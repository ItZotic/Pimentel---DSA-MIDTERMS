#include <iostream>
#include <string>
using namespace std;

struct node
{
    string data; 
    node *next;
};

class linked_list
{
private:
    node *head, *tail;

public:
    linked_list()
    {
        head = NULL;
        tail = NULL;
    }
    void delete_first()
    {
        if (head == NULL)
        {
            cout << "List is empty, nothing to delete.\n";
            return;
        }

        node *temp = head;
        head = head->next;
        delete temp;
    }
    void delete_last()
    {
        if (head == NULL)
        {
            cout << "List is empty, nothing to delete.\n";
            return;
        }

        if (head == tail)
        {
            delete head;
            head = NULL;
            tail = NULL;
            return;
        }

        node *current = head;
        node *previous = NULL;

        while (current->next != NULL)
        {
            previous = current;
            current = current->next;
        }

        tail = previous;
        if (previous != NULL)
            previous->next = NULL;
        delete current;
    }
    void delete_position(int pos)
    {
        if (head == NULL)
        {
            cout << "List is empty, nothing to delete.\n";
            return;
        }

        node *current = head;
        node *previous = NULL;

        for (int i = 1; i < pos && current != NULL; i++)
        {
            previous = current;
            current = current->next;
        }

        if (current == NULL)
        {
            cout << "ERROR! Position exists outside of the list!\n";
            return;
        }

        if (previous == NULL)
            head = current->next;
        else
            previous->next = current->next;

        if (current == tail)
            tail = previous;

        delete current;
    }
    void insert_start(string value)
    {
        node *temp = new node;
        temp->data = value;
        temp->next = head;
        head = temp;

        if (tail == NULL)
            tail = head;
    }
    void insert_last(string value)
    {
        node *temp = new node;
        temp->data = value;
        temp->next = NULL;

        if (head == NULL)
        {
            head = temp;
            tail = temp;
        }
        else
        {
            tail->next = temp;
            tail = temp;
        }
    }
    void insert_position(int pos, string value)
    {
        node *temp = new node;
        temp->data = value;
        temp->next = NULL;

        if (pos <= 0)
        {
            cout << "Invalid position.\n";
            delete temp;
            return;
        }

        if (pos == 1)
        {
            temp->next = head;
            head = temp;
            if (tail == NULL)
                tail = head;
            return;
        }

        node *current = head;
        node *previous = NULL;

        for (int i = 1; i < pos && current != NULL; i++)
        {
            previous = current;
            current = current->next;
        }

        if (current == NULL && pos > 1)
        {
            cout << "ERROR! Position exists outside of the list!\n";
            delete temp;
            return;
        }

        previous->next = temp;
        temp->next = current;

        if (previous == tail)
            tail = temp;
    }
    void display()
    {
        node *temp = head;
        while (temp != NULL)
        {
            cout << temp->data << " -> ";
            temp = temp->next;
        }
        cout << "NULL\n";
    }
};

int main()
{
    linked_list a;
    int choice;
    string value;
    int position;

    while (true)
    {
        cout << "\n---------------------\n";
        cout << "Linked List Operations\n";
        cout << "---------------------\n";
        cout << "========MENU========\n";
        cout << "1. Insert: beginning\n";
        cout << "2. Insert: end\n";
        cout << "3. Insert: position\n";
        cout << "4. Delete: first\n";
        cout << "5. Delete: last\n";
        cout << "6. Delete: position\n";
        cout << "7. Display!\n";
        cout << "8. Exit\n";
        cout << "====================\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice)
        {
        case 1:
            cout << "Enter value to insert at the beginning: ";
            cin >> value;
            a.insert_start(value);
            break;
        case 2:
            cout << "Enter value to insert at the end: ";
            cin >> value;
            a.insert_last(value);
            break;
        case 3:
            cout << "Enter position and value to insert: ";
            cin >> position >> value;
            a.insert_position(position, value);
            break;
        case 4:
            a.delete_first();
            break;
        case 5:
            a.delete_last();
            break;
        case 6:
            cout << "Enter position to delete: ";
            cin >> position;
            a.delete_position(position);
            break;
        case 7:
            cout << "Linked List: ";
            a.display();
            break;
        case 8:
            cout << "Exiting program. Goodbye! ^^ \n";
            return 0;
        default:
            cout << "Invalid choice.\n";
        }
    }

    return 0;
}

